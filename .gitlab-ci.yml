variables:
  GIT_SUBMODULE_STRATEGY: recursive
  DOCKER_TAG: ${CI_COMMIT_REF_NAME}
  DOCKER_IMAGE_DEV: plf

workflow:
    rules:
        - if: $CI_COMMIT_BRANCH == "develop" && $CI_COMMIT_MESSAGE
        - if: $CI_COMMIT_BRANCH == "92-need-to-update-docs-api-reference" && $CI_COMMIT_MESSAGE
        - if: $CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "api"
        - if: $CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "web"

stages:
    - prepare
    - check
    - training
    - test-train
    - test-eval
    - evaluation
    - oracles:deploy
    - pdoc
    - build
    - deploy

## Prepare Jobs:
docker-plf:
 stage: prepare
 environment:
    name: proloaf
 script:
   - echo $CI_PROJECT_DIR/${DOCKER_FILE}
   - docker build
       --file $CI_PROJECT_DIR/${DOCKER_FILE}
       --tag ${DOCKER_IMAGE_DEV}:${CI_COMMIT_REF_NAME} .
 tags:
   - docker

prep-docs:
  stage: pdoc
  image: ${DOCKER_IMAGE_DEV}:${CI_COMMIT_REF_NAME}
  script:
    - pip3 install --no-cache-dir pdoc
    - pdoc -o ./docs/static/reference/proloaf -t . -d numpy ./src
    - ls -l ./docs/static/reference/proloaf
  artifacts:
    expire_in: 1 day
    when: on_success
    name: pdoc
    paths:
      - docs/static/reference/proloaf
  tags:
    - docker

docker-docs:
 stage: prepare
 environment:
   name: docs
 script:
   - echo $CI_PROJECT_DIR/${DOCKER_FILE}
   - docker build
       --file $CI_PROJECT_DIR/${DOCKER_FILE}
       --tag ${DOCKER_IMAGE_DEV}_docs:${CI_COMMIT_REF_NAME} .
 tags:
   - docker

### DCO Checker
dco:
    stage: check
    script:
        - pip3 install -U dco-check
        - dco-check
    allow_failure: true
    image: ${DOCKER_IMAGE_DEV}:${CI_COMMIT_REF_NAME}
    tags:
        - docker
    only:
      refs:
        - master
      variables:
        - $CI_PIPELINE_SOURCE == 'push'

## Training Jobs:
train_on_call:
    stage: training
    script:
        - chmod +x ./shell/trigger_training.sh
        - ./shell/trigger_training.sh
    timeout: 4 hours
    artifacts:
        when: on_success
        name: proloaf
        paths:
            - ./oracles/*
            - ./logs/**/*
            - ./logs/*
            - ./runs/**/*
            - ./runs/**/**/*
    image: ${DOCKER_IMAGE_DEV}:${CI_COMMIT_REF_NAME}
    tags:
        - docker
    only:
        variables:
            - $CI_PIPELINE_SOURCE == 'api' || $CI_PIPELINE_SOURCE == 'web'


### Test Training Jobs
test_train_no_hp:
    stage: test-train
    script:
        - python3 src/train.py -s ci_tests/ci_test_no_hp --ci
    artifacts:
        when: on_success
        name: proloaf
        expire_in: 1 hour
        paths:
            - ./oracles/*
            - ./logs/**/*
            - ./logs/*
    image: plf:${CI_COMMIT_REF_NAME}
    tags:
        - docker
    only:
        variables:
            - $CI_PIPELINE_SOURCE == 'push'


test_train_hp:
    stage: test-train
    script:
        - python3 src/train.py -s ci_tests/ci_test_hp --ci
    artifacts:
        when: on_success
        expire_in: 1 hour
        paths:
            - ./oracles/*
            - ./logs/**/*
            - ./logs/*
    image: plf:${CI_COMMIT_REF_NAME}
    tags:
        - docker
    only:
        variables:
            - $CI_PIPELINE_SOURCE == 'push'


lint_train:
    stage: test-train
    image: ${DOCKER_IMAGE_DEV}:${CI_COMMIT_REF_NAME}
    script:
        - chmod +x ./shell/lint_script.sh
        - ./shell/lint_script.sh train
    artifacts:
        when: on_success
        name: proloaf
        expire_in: 1 hour
        reports:
            junit: ./train_lint.xml
        paths:
            - ./oracles/*
            - ./train_lint.xml
    tags:
        - docker
    only:
        variables:
            - $CI_PIPELINE_SOURCE == 'push'


## Evaluation Jobs:
eval_on_call:
    stage: evaluation
    script:
         - chmod +x ./shell/execute_evaluation.sh
         - ./shell/execute_evaluation.sh
    artifacts:
        when: on_success
        name: proloaf
        paths:
            - oracles/**/*
    image: plf:${CI_COMMIT_REF_NAME}
    tags:
        - docker
    only:
        variables:
            - $CI_PIPELINE_SOURCE == 'api' || $CI_PIPELINE_SOURCE == 'web'


### Test Evaluation Jobs
test_eval_hp:
    stage: test-eval
    script:
        - python3 src/evaluate.py -s ci_tests/ci_test_hp
    artifacts:
      name: proloaf
      when: on_success
      expire_in: 1 hour
      paths:
        - ./oracles/**/*
    image: plf:${CI_COMMIT_REF_NAME}
    tags:
        - docker
    needs:
        - job: test_train_hp
    only:
        variables:
            - $CI_PIPELINE_SOURCE == 'push'


test_eval_no_hp:
    stage: test-eval
    script:
        - python3 src/evaluate.py -s ci_tests/ci_test_no_hp
    artifacts:
      name: proloaf
      when: on_success
      expire_in: 1 hour
      paths:
        - ./oracles/**/*
    image: plf:${CI_COMMIT_REF_NAME}
    tags:
        - docker
    needs:
        - job: test_train_no_hp
    only:
        variables:
            - $CI_PIPELINE_SOURCE == 'push'


lint_evaluate:
    stage: test-eval
    script:
        - chmod +x ./shell/lint_script.sh
        - ./shell/lint_script.sh evaluate
    artifacts:
      name: proloaf
      when: on_success
      expire_in: 1 hour
      reports:
        junit: ./evaluate_lint.xml
      paths:
        - ./oracles/*
        - ./evaluate_lint.xml
    image: plf:${CI_COMMIT_REF_NAME}
    tags:
        - docker
    needs:
        - job: lint_train
    only:
        variables:
            - $CI_PIPELINE_SOURCE == 'push'


## Deploy Results of latest Runs to Oracles
push_to_oracles:
    stage: oracles:deploy
    script:
         - TIMESTAMP=$(python shell/return_timestamp.py)
         - git clone https://gonca.guerses.tran:$CI_ACCESS@git.rwth-aachen.de/acs/public/automation/plf/plf-oracles.git ./repo/
         - git config --global user.email "test@test.test"
         - git config --global user.name "GitLab CI train"
         - mkdir -p ./repo/$STATION/$TIMESTAMP
         - mkdir ./repo/$STATION/$TIMESTAMP/logs
         - mkdir ./repo/$STATION/$TIMESTAMP/runs
         - mkdir ./repo/$STATION/$TIMESTAMP/model
         - mv logs/* ./repo/$STATION/$TIMESTAMP/logs/
         - mv runs/* ./repo/$STATION/$TIMESTAMP/runs/
         - touch ./repo/$STATION/$TIMESTAMP/index.md
         - python shell/create_hugo_header.py --date=$TIMESTAMP --title="$STATION $TIMESTAMP" --link=$TIMESTAMP --imginclude==True >> ./repo/$STATION/$TIMESTAMP/index.md
         - echo "[Source Pipeline](https://git.rwth-aachen.de/acs/public/automation/plf/proloaf/-/pipelines/$CI_PIPELINE_ID)" >> ./repo/$STATION/$TIMESTAMP/index.md
         - echo "" >> ./repo/$STATION/$TIMESTAMP/index.md
         - cat oracles/result_page_content.md >> ./repo/$STATION/$TIMESTAMP/index.md
         - mv oracles/*/* oracles/
         - mv oracles/* ./repo/$STATION/$TIMESTAMP/model/
         #- chmod +x ./shell/make_station_folder_index.sh
         #- ./shell/make_station_folder_index.sh
         - python ./shell/make_station_folder_index.py $STATION
         - cd ./repo/
         - git add *
         - git commit -m "New Training Data for $STATION from GitLab CI"
         - git push
         - cd ..
         - touch link_to_results.txt
         - echo "<a href=\"https://acs.pages.rwth-aachen.de/public/automation/plf/proloaf/docs/results/plf-oracles/$STATION/$TIMESTAMP\">Results</a>" >> link_to_results.html
         #- chmod +x ./shell/trigger_docs_pipeline
         #- ./shell/trigger_docs_pipeline
    artifacts:
        when: on_success
        name: proloaf
        paths:
          - ./repo/$STATION/**/**/*
          - ./link_to_results.html
    image: plf:${CI_COMMIT_REF_NAME}
    tags:
        - docker
    only:
        variables:
            - $CI_PIPELINE_SOURCE == 'web' || $CI_PIPELINE_SOURCE == 'api'

hugo:
  stage: build
  image: ${DOCKER_IMAGE_DEV}_docs:${CI_COMMIT_REF_NAME}
  script:
    - cd docs
    - npm install -D postcss
    - npm install -D --save autoprefixer
    - npm install -D --save postcss-cli
    - echo $PWD
    - mkdir -p content/en/results/
    - cd content/en/results/
    - git clone https://gonca.guerses.tran:$CI_ACCESS@git.rwth-aachen.de/acs/public/automation/plf/plf-oracles.git
    - cd ../../..
    - hugo -v
    - ls -l
  artifacts:
    when: on_success
    name: hugo
    paths:
      - docs/public
      #- docs/content/en/results/*

  tags:
      - docker

pages:
  stage: deploy
  script:
    #- cd docs
    - mkdir public
    - mkdir -p ./public/content/en/results
    - ls -l
    - cp -r ./docs/public/* public
    - ls ./docs
    - ls ./docs/public
    - cp -r ./docs/public/results/* public/content/en/results/
  artifacts:
    name: hugo
    paths:
      - public
  tags:
      - docker
  #only:
  #  - master
    #- linux
